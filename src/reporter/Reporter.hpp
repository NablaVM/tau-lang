#ifndef REPORTER_HPP
#define REPORTER_HPP

#include <cstddef>
#include <string>
#include <stack>

namespace TAU
{

//! \brief Reports information generated from somewhere in TAU to a user
class Reporter
{
public:

    //! \brief Construct a Reporter object
    //! \param reporting_object The name of the object that will be reporting information
    Reporter(std::string reporting_object);

    //! \brief Level of which to report information to user
    enum class Level
    {
        WARNING,     //! Report as a non-fatal warning
        ERROR        //! Report as a fatal error
    };

    //! \brief Types of indicators that can be used for display
    enum class Indicator
    {
        ARROW_LINE,  //! Shows an arrow :  ~~~~^~~~~
        ARROW,       //! Shows an arrow :     ^
        LINE,        //! Shows a line   :  ~~~~~~~~~
        NONE         //! Show nothing
    };

    //! \brief A structured report to issue to a user
    struct Report
    {
        Level level;             //! Level of the report
        Indicator indicator;     //! Indicator to draw on the report
        std::size_t line;        //! Line that the report is about
        std::size_t col;         //! Column that the report starts at
        std::string source_file; //! Source file origin
        std::string source_line; //! Line to be reported
        std::string info;        //! Information to be reported with the report
    };

    //! \brief Issue a report
    void issueReport(Report report);

protected:
    std::stack<Report> reports_generated;   //! Reported generated by the owner

private:
    std::string reporting_object;

    void displayIndicatorArrowLine(Level level, std::size_t arrow_pos, unsigned trail_length=5);
    void displayIndicatorArrow(Level level, std::size_t arrow_pos);
    void displayIndicatorLine(Level level, std::size_t start_pos, std::size_t end_pos);
};

}


#endif